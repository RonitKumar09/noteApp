const User = require('../models/users_db');
const async = require('async');
const crypto = require('crypto');
const nodemailer = require('nodemailer');

module.exports = {
    getLogin: (req, res) => res.render('login'),
    getSignup: (req, res) => res.render('signup'),
    postSignup: (req, res) => {
        let user_id = req.body.user_id;
        let user_mail = req.body.email;
        let password = req.body.password;
        let userData = { name: user_id, email: user_mail };
        User.register(userData, password, (err, user) => {
            if (err) {
                req.flash('error_msg', 'ERROR:' + err);
                return res.redirect('/signup');
            }
            req.flash('success_msg', `${userData.name} registered successfully!`);
            res.render('login');
        });
    },
    logout: (req, res) => {
        req.logout(function(err) {
            if (err) {
                req.flash('error_msg', 'Logout failed: ' + err);
                return res.redirect('/home');
            }
            req.flash('success_msg', 'Logged Out Successfully!!');
            res.redirect('/login');
        });
    },
    getForgot: (req, res) => res.render('forgot'),
    postForgot: (req, res, next) => {
        async.waterfall([
            (done) => {
                crypto.randomBytes(20, (err, buf) => {
                    let token = buf.toString('hex');
                    done(err, token);
                });
            },
            (token, done) => {
                User.findOne({ email: req.body.email })
                    .then(user => {
                        if (!user) {
                            req.flash('error_msg', `user with email: ${req.body.email} does not exist`);
                            return res.redirect('/forgot');
                        }
                        user.resetPasswordToken = token;
                        user.resetPasswordExpires = Date.now() + 1800000;
                        user.save(err => {
                            done(err, token, user);
                        });
                    })
                    .catch(err => {
                        req.flash('error_msg', 'ERROR: ' + err);
                        res.redirect('/forgot');
                    });
            },
            (token, user) => {
                let smtpTransport = nodemailer.createTransport({
                    service: 'Gmail',
                    auth: {
                        user: process.env.EMAIL_USER,
                        pass: process.env.EMAIL_PASS
                    }
                });
                let mailOptions = {
                    to: user.email,
                    from: 'noteApp_Recover_Password noteAppauth@gmail.com',
                    subject: 'Recover Password of noteApp',
                    text: 'Follow the link to recover your Password: \n\n' +
                        'https://' + req.headers.host + '/reset/' + token + '\n\n' +
                        'If this password recovery request is not generated by you, please ignore this email.'
                };
                smtpTransport.sendMail(mailOptions, err => {
                    req.flash('success_msg', 'Email sent with recovery link on your registered mail-id!');
                    res.redirect('/login');
                });
            }
        ], err => {
            if (err) { res.redirect('/forgot'); }
        });
    },
    getReset: (req, res) => {
        User.findOne({ resetPasswordToken: req.params.token, resetPasswordExpires: { $gt: Date.now() } })
            .then(user => {
                if (!user) {
                    req.flash('error_msg', 'Password reset token is either invalid or has been expired!!');
                    return res.redirect('/forgot');
                }
                res.render('newpassword', { token: req.params.token });
            })
            .catch(err => {
                req.flash('error_msg', 'ERROR:' + err);
                res.redirect('/forgot');
            });
    },
    postReset: (req, res) => {
        async.waterfall([
            (done) => {
                User.findOne({ resetPasswordToken: req.params.token, resetPasswordExpires: { $gt: Date.now() } })
                    .then(user => {
                        if (!user) {
                            req.flash('error_msg', 'Password reset token is either invalid or has been expired!!');
                            return res.redirect('/forgot');
                        }
                        if (req.body.password != req.body.confirmpassword) {
                            req.flash('error_msg', 'Password does not match');
                            return res.redirect('/forgot');
                        }
                        user.setPassword(req.body.password, (err) => {
                            user.resetPasswordToken = undefined;
                            user.resetPasswordExpires = undefined;
                            user.save(err => {
                                req.login(user, err => {
                                    done(err, user);
                                });
                            });
                        });
                    })
                    .catch(err => {
                        req.flash('error_msg', 'ERROR: ' + err);
                        res.redirect('/forgot');
                    });
            },
            (user) => {
                let smtpTransport = nodemailer.createTransport({
                    service: 'Gmail',
                    auth: {
                        user: process.env.EMAIL_USER,
                        pass: process.env.EMAIL_PASS
                    }
                });
                let mailOptions = {
                    to: user.email,
                    from: 'noteApp _Password_Changed noteAppauth@gmail.com',
                    subject: 'Your Password has been successfully changed!',
                    text: `Hello, ${user.name} \n\nYou have successfully changed your Password for the account:  ${user.email}\n\n` +
                        `Click Here to log in:- https://${req.headers.host}`
                };
                smtpTransport.sendMail(mailOptions, err => {
                    req.flash('success_msg', 'Your Password has been changed Successfully!!');
                    res.redirect('/login');
                });
            }
        ], err => {
            res.redirect('/login');
        });
    }
};
